(ns nhss.core
  (:require [clojure.string :as string]
            [cognitect.transit :as t]))

(defn standard-levels-string []
  ;; Fudge for now so I don't need to bring a server up that I can
  ;; request from.
  ;; See nhss/core.clj:write-transit-levels-to-string
  "[\"^ \",\"~:1a\",\"┌─┬────┐ ┌────┐\\n│<│@···└─┘····│\\n│^├┐·00····0··│\\n│^││··00│·0·0·│\\n│^││····│·····│\\n│^│└───┬┘0────┤\\n│^│    │······│\\n│^└────┘······│\\n│··^^^^0000···│\\n│··┌───┐······│\\n└──┘   └──────┘\",\"~:1b\",\"┌────┐  ┌───┐ \\n│····│  │···│ \\n│·0··└──┘·0·│ \\n│·0······0··│ \\n│··┌─┐@┌─┐0·│ \\n├──┴─┴─┼─┘·─┴┐\\n│··^^^<│·····│\\n│··┌───┤0····│\\n└┐^│   │·0···│\\n │^└───┘·0···│\\n │··^^^^0·0··│\\n │··┌────────┘\\n └──┘         \",\"~:2a\",\" ┌──┐          ┌─────────┐\\n┌┘·@└──────┐   │·········│\\n│··········│   │·········│\\n│·0┌───┐0─·│   │·········│\\n│··│···│·0·│   │····<····│\\n│·0·0····0─┤   │·········│\\n│·0··0··│··│   │·········│\\n│·────0·└┐·│   │·········│\\n│··0···0·│·└┐  │·········│\\n│·──┬0─···0·└──┴────────+┤\\n│···│··0─·0·^^^^^^^^^^^^·│\\n│··0······┌──────────────┘\\n└───┐··│··│               \\n    └──┴──┘               \",\"~:2b\",\"┌────┬────┐       ┌─────────┐\\n│····│····└─┐     │·········│\\n│··00│00···@│     │·········│\\n│·····0···┌─┘     │·········│\\n│····│····│       │····<····│\\n├─·──┼────┴┐      │·········│\\n│··0·│·····│      │·········│\\n│·00·│0·0·0│      │·········│\\n│··0·····0·│      │·········│\\n│·000│0··0·└───────────────+┤\\n│····│··0·0·^^^^^^^^^^^^^^^·│\\n└────┴──────────────────────┘\",\"~:3a\",\"  ┌─┬────┐          \\n┌─┘·│····│          \\n│···0····├─┬───────┐\\n│·─·00─00│·│·······│\\n│·00─······│·······│\\n│·─··0·│···│·······│\\n│····─0├─0─┤···<···│\\n│··00··0···│·······│\\n│·──···─···│·······│\\n│····─0┬───┤·······│\\n└─┐··0·└───┴──────+┤\\n  │··0@^^^^^^^^^^^·│\\n  └────────────────┘\",\"~:3b\",\"┌────────┬───┬─────┐\\n│········│···│·····│\\n│·00··─00│·─·│·····│\\n│··│·0·0·│00·│·····│\\n│─·│··─··│·─·│··<··│\\n│···│─·······│·····│\\n│···│·0·─···┌┤·····│\\n│·0·│0·│···┌┘│·····│\\n├─0·│··└───┴─┴────+┤\\n│··0····^^^^^^^^^^·│\\n│···│·@┌───────────┘\\n└───┴──┘            \",\"~:4a\",\"┌────────────────────────┐\\n│@······^^^^^^^^^^^^^^^^·│\\n│·······┌──────────────┐·│\\n└┬─────·└────┐         │·│\\n │···········│         │·│\\n │·0·0·0·0·0·│         │·│\\n┌┴──────·────┤         │·│\\n│···0·0··0·0·│         │·│\\n│···0········│         │·│\\n└┬───·──────┬┘   ┌─────┤·│\\n │··0·0·0···│  ┌─┤·····│·│\\n │·····0····│  │·+·····│·│\\n │·0·0···0·┌┘  ├─┤·····│·│\\n┌┴─────·─┬─┘   │·+·····+·│\\n│··0·····│     ├─┤·····├─┘\\n│········│     │·+·····│  \\n│···┌────┘     └─┤·····│  \\n└───┘            └─────┘  \",\"~:4b\",\"  ┌──────────────────────┐\\n  │··^^^^^^^^^^^^^^^^^^··│\\n  │··┌────────┬────────┐·│\\n┌─┴┐·│    ┌───┤        │·│\\n│··│0└┐  ┌┘···│        │·│\\n│·····├──┤·0··│        │·│\\n│·00··│··│··0·│        │·│\\n└┐··00│···00·┌┘        │·│\\n │0··0···│0··│   ┌─────┤·│\\n │·00·│··│··0│ ┌─┤·····│·│\\n │·0·0└──┤·0·│ │·+·····│·│\\n │·······│··┌┘ ├─┤·····│·│\\n └──┐·0··│·┌┘  │·+·····+·│\\n    └┬─·─┘·│   ├─┤·····├─┘\\n     │·0···│   │·+·····│  \\n     │@·│··│   └─┤·····│  \\n     └──┴──┘     └─────┘  \"]")

(defn standard-levels []
  (->> (standard-levels-string)
       (t/read (t/reader :json))))

(defn read-level [level-string]
  (let [lines (string/split level-string #"\n")
        cells (map (comp (partial apply vector) seq) lines)]
    (into [] cells)))
